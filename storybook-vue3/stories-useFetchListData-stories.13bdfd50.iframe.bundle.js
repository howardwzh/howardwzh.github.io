"use strict";(self.webpackChunkstorybook_vue3=self.webpackChunkstorybook_vue3||[]).push([[588],{"./src/stories/useFetchListData.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useFetchListData_stories});var vue_esm_bundler=__webpack_require__("./node_modules/.pnpm/vue@3.5.13_typescript@5.7.2/node_modules/vue/dist/vue.esm-bundler.js");const axiosInstance=__webpack_require__("./node_modules/.pnpm/axios@1.7.9/node_modules/axios/lib/axios.js").A.create({baseURL:"http://localhost:3000/mock/",timeout:5e3,headers:{"Content-Type":"application/json"}});axiosInstance.interceptors.request.use((config=>{const token=localStorage.getItem("token");return token&&(config.headers.Authorization=`Bearer ${token}`),config}),(error=>Promise.reject(error))),axiosInstance.interceptors.response.use((response=>response.data),(error=>(console.error("API Error:",error),Promise.reject(error))));const fetch={async request(url,method,dataOrParams,config){const requestConfig={url,method,..."GET"===method?{params:dataOrParams}:{data:dataOrParams},...config};return axiosInstance.request(requestConfig)},get:async(url,params,config)=>fetch.request(url,"GET",params,config),post:async(url,data,config)=>fetch.request(url,"POST",data,config),put:async(url,data,config)=>fetch.request(url,"PUT",data,config),delete:async(url,params,config)=>fetch.request(url,"DELETE",params,config)},utils_fetch=fetch,getUsers=async()=>({data:{errCode:"0",data:{list:await utils_fetch.get("/api/users")}}}),useFetchListData_stories={title:"composables/useFetchListData"},Default=(args=>({setup(){const{listData,fetchList}=function useFetchListData(){const listData=(0,vue_esm_bundler.KR)(),listPage=(0,vue_esm_bundler.KR)(1),listTotal=(0,vue_esm_bundler.KR)(0),isLoading=(0,vue_esm_bundler.KR)(!1),isFinished=(0,vue_esm_bundler.KR)(!1),isError=(0,vue_esm_bundler.KR)(!1),cacheAll={},fetchNormalList=async({fetchFn,fetchParams,size=10,isNew=!1,needCache=!1})=>{if(!isNew&&isFinished.value)return listData.value||[];updateLoadingState(!0);const page=isNew?1:listPage.value,params={...fetchParams,page,size};try{const response=needCache&&cacheAll[JSON.stringify(params)]?cacheAll[JSON.stringify(params)]:await fetchFn(params);if("0"!==response.data.errCode)throw new Error(`Error: ${response.data.errCode}`);{const newData=response.data.data.list||[];listData.value=isNew?newData:[...listData.value||[],...newData],listTotal.value=response.data.data.total,listPage.value=page+1,needCache&&(cacheAll[JSON.stringify(params)]=response),isFinished.value=newData.length<size}}catch(error){handleError(error)}finally{updateLoadingState(!1)}return listData.value||[]},updateLoadingState=(loading,finished=!1)=>{isLoading.value=loading,isFinished.value=finished,isError.value=!1},handleError=error=>{console.error(error),isError.value=!0,isFinished.value=!0,isLoading.value=!1};return{listData,listPage,listTotal,isLoading,isFinished,isError,fetchList:async({fetchFn,fetchParams={},size=10,isNew=!1,needCache=!1})=>fetchNormalList({fetchFn,fetchParams,size,isNew,needCache})}}();return fetchList({fetchFn:getUsers,fetchParams:{}}),{args,listData}},template:'<div>\n  <div v-for="(item, index) in listData" :key="index" style="display:flex;gap:8px;">\n  <span>{{item.name}}</span>\n  <span>{{item.email}}</span>\n  </div>\n  </div>'})).bind({});Default.args={};const __namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'args => ({\n  setup() {\n    const {\n      listData,\n      fetchList\n    } = useFetchListData();\n    fetchList({\n      fetchFn: getUsers,\n      fetchParams: {}\n    });\n    return {\n      args,\n      listData\n    };\n  },\n  template: `<div>\n  <div v-for="(item, index) in listData" :key="index" style="display:flex;gap:8px;">\n  <span>{{item.name}}</span>\n  <span>{{item.email}}</span>\n  </div>\n  </div>`\n})',...Default.parameters?.docs?.source}}}}}]);